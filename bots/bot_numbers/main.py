import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from google_sheets import add_entry, get_todays_entries, get_status_updates, sh, SHEET_NAME
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from gspread_formatting import CellFormat, Color, format_cell_range
from google_sheets import ensure_checkboxes

load_dotenv()

ASSEMBLY_CHANNEL_ID = -1002278564402
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()



# –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ—Ä–æ–Ω
POSITIONS = ["–ü–µ—Ä–µ–¥", "–ó–∞–¥", "–õ–µ–≤–æ", "–ü—Ä–∞–≤–æ"]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def clear_row_background(row_index):
    worksheet = sh.worksheet(SHEET_NAME)
    neutral_fill = CellFormat(backgroundColor=Color(1, 1, 1))  # –±–µ–ª—ã–π —Ñ–æ–Ω
    range_str = f"A{row_index}:K{row_index}"
    format_cell_range(worksheet, range_str, neutral_fill)

def build_keyboard(selected: list[str]) -> InlineKeyboardMarkup:
    buttons = []
    for pos in POSITIONS:
        prefix = "‚úÖ " if pos in selected else ""
        buttons.append(InlineKeyboardButton(text=prefix + pos, callback_data=pos))

    return InlineKeyboardMarkup(
        inline_keyboard=[
            buttons[:2],
            buttons[2:],
            [InlineKeyboardButton(text="üîò –í–°–ï", callback_data="–í–°–ï")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="change_number")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")]
        ]
    )

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: HH123Y):")

@dp.message(F.text)
async def handle_number_input(message: Message):
    if message.chat.type != 'private':
        return  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç
    number = message.text.strip()
    if len(number) > 6:
        await message.answer("‚ùó –ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    user_data[message.from_user.id] = {
        "number": number,
        "positions": []
    }
    await message.answer(
        f"–ù–æ–º–µ—Ä <b>{number}</b> –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—ã, –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è:",
        reply_markup=build_keyboard([])
    )

@dp.callback_query(F.data == "confirm")
async def handle_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)

    if not data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞", show_alert=True)
        return

    if not data["positions"]:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É", show_alert=True)
        return

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    result = add_entry(
        user_id=user_id,
        username=callback.from_user.username or "-",
        number=data["number"],
        sides=data["positions"]
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    await bot.send_message(
        chat_id=ASSEMBLY_CHANNEL_ID,
        text=(
        f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –Ω–æ–º–µ—Ä <b>{data['number']}</b>\n"
        f"üìç –°—Ç–æ—Ä–æ–Ω—ã: <i>{', '.join(data['positions'])}</i>"
        )
    )
    worksheet = sh.worksheet(SHEET_NAME)
    row_index = len(worksheet.get_all_values())  # –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    clear_row_background(row_index)

    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä <b>{data['number']}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–°—Ç–æ—Ä–æ–Ω—ã: {', '.join(data['positions'])}"
    )
    user_data.pop(user_id, None)
    await callback.answer()

@dp.callback_query(F.data == "–í–°–ï")
async def handle_all_toggle(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)

    if not data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞", show_alert=True)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ ‚Äî —Å–Ω–∏–º–∞–µ–º, –∏–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ
    if set(data["positions"]) == set(POSITIONS):
        data["positions"] = []
        await callback.answer("‚ùå –°–Ω—è—Ç—ã –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã")
    else:
        data["positions"] = POSITIONS.copy()
        await callback.answer("‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(reply_markup=build_keyboard(data["positions"]))

@dp.callback_query(lambda c: c.data in POSITIONS)
async def handle_position_select(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)

    if not data:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞", show_alert=True)
        return

    position = callback.data
    if position in data["positions"]:
        data["positions"].remove(position)
    else:
        data["positions"].append(position)

    await callback.message.edit_reply_markup(reply_markup=build_keyboard(data["positions"]))
    await callback.answer()

@dp.callback_query(F.data == "change_number")
async def handle_change_number(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_data:
        user_data.pop(user_id)
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞:")
    await callback.answer()

async def notify_status_change():
    while True:
        entries = get_status_updates()
        for entry in entries:
            status = entry["status"]
            user_id = entry["user_id"]

            if not user_id:
                continue

            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status}, –Ω–æ–º–µ—Ä: {entry['scooter_number']}")

            if status == "–≥–æ—Ç–æ–≤–æ":
                text = f"‚úÖ –ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞ <b>{entry['scooter_number']}</b> –≥–æ—Ç–æ–≤!"
            elif status == "–Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                text = f"üî¥ –ù–æ–º–µ—Ä <b>{entry['scooter_number']}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."

            try:
                await bot.send_message(chat_id=user_id, text=text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥

REPORT_USER_IDS = [285742976, 703311980, 1123621831, 788329249]  # ‚Üê –¥–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ Telegram ID

async def send_daily_report():
    print("üì® –°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: send_daily_report()")
    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%d.%m.%Y')
    entries = get_todays_entries()

    print("‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞...")

    if not entries:
        text = f"üìÜ –û—Ç—á–µ—Ç –∑–∞ {today}:\n–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    else:
        lines = []
        for i, e in enumerate(entries, start=1):
            lines.append(
                f"<b>{i}.</b> <code>{e['number']}</code>\n"
                f"‚îî üìç <i>{e['sides']}</i>\n"
                f"‚îî üìå <b>{e['status'] or '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'}</b>\n"
            )
        text = f"üìÜ <b>–û—Ç—á–µ—Ç –∑–∞ {today}</b>\n\n" + "\n".join(lines) + f"\n<b>–í—Å–µ–≥–æ:</b> {len(entries)}"

    for user_id in REPORT_USER_IDS:
        try:
            await bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(1)

    await highlight_next_empty_row()


async def highlight_next_empty_row():
    worksheet = sh.worksheet(SHEET_NAME)
    values = worksheet.col_values(1)
    next_row = len(values) + 1  # —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –ø—É—Å—Ç—É—é
    num_cols = 11  # A‚ÄìK
    values = worksheet.get_all_values()
    if next_row > len(values):
        worksheet.append_row(["–î–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω"] + [""] * (num_cols - 1))

    # –¶–≤–µ—Ç: –∂—ë–ª—Ç—ã–π
    yellow_fill = CellFormat(backgroundColor=Color(1, 1, 0.6))
    cell_range = f"A{next_row}:K{next_row}"
    format_cell_range(worksheet, cell_range, yellow_fill)

async def main():
    try:
        ensure_checkboxes()  # <-- —Å–æ–∑–¥–∞—ë—Ç —Ñ–ª–∞–∂–∫–∏ –≤ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–ª–∞–∂–∫–æ–≤: {e}")
    
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_daily_report, CronTrigger(hour=19, minute=40))
    scheduler.start()

    await asyncio.gather(
        dp.start_polling(bot),
        notify_status_change()  # –µ—Å–ª–∏ –µ—Å—Ç—å
    )

if __name__ == "__main__":
    asyncio.run(main())