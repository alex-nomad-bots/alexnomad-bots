import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from dotenv import load_dotenv
from datetime import datetime
import pytz
from gspread_formatting import DataValidationRule, BooleanCondition, set_data_validation_for_cell_range
from gspread_formatting import format_cell_range, CellFormat, Color
from gspread_formatting import CellFormat, set_data_validation_for_cell_range
from gspread_formatting.dataframe import format_with_dataframe
load_dotenv()

GOOGLE_KEY_PATH = os.getenv('GOOGLE_KEY_PATH')
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')
SHEET_NAME = '–ó–∞—è–≤–∫–∏'


scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_KEY_PATH, scope)
gc = gspread.authorize(credentials)
sh = gc.open_by_url(GOOGLE_SHEET_URL)

## –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
try:
    worksheet = sh.worksheet(SHEET_NAME)
except gspread.exceptions.WorksheetNotFound:
    worksheet = sh.add_worksheet(title=SHEET_NAME, rows="1000", cols="11")
    worksheet.append_row([
        "Telegram ID", "–ù–∏–∫", "–ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞", "–°—Ç–æ—Ä–æ–Ω—ã", "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "–£–≤–µ–¥–æ–º–ª–µ–Ω–æ",
        "–ü–µ—Ä–µ–¥ (‚òëÔ∏è)", "–ó–∞–¥ (‚òëÔ∏è)", "–õ–µ–≤–æ (‚òëÔ∏è)", "–ü—Ä–∞–≤–æ (‚òëÔ∏è)"
    ])

def ensure_checkboxes():
    rule = DataValidationRule(
        condition=BooleanCondition('BOOLEAN'),
        showCustomUi=True
    )
    checkbox_range = 'H2:K1000'  # ‚Üê –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    set_data_validation_for_cell_range(worksheet, checkbox_range, rule)

# –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω–∏–º —á–µ–∫–±–æ–∫—Å—ã
ensure_checkboxes()

def add_entry(user_id, username, number, sides):
    try:
        print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É...")
        date_now = datetime.now().strftime('%d.%m.%Y | %H:%M')

        print(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {user_id}, {username}, {number}, {', '.join(sides)}, {date_now}, '–í —Ä–∞–±–æ—Ç–µ', ''")

        result = worksheet.append_row([
            str(user_id),
            username,
            number,
            ', '.join(sides),
            date_now,
            '–í —Ä–∞–±–æ—Ç–µ',
            '',         # –£–≤–µ–¥–æ–º–ª–µ–Ω–æ
            False,  # —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º —á–µ–∫–±–æ–∫—Å—ã
            False,
            False,
            False
        ])

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∏: {result}")
        print("‚úÖ –ó–∞–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

def get_status_updates():
    worksheet = sh.worksheet(SHEET_NAME)
    data = worksheet.get_all_records()
    result = []

    for idx, row in enumerate(data, start=2):  # –Ω–∞—á–∏–Ω–∞–µ–º —Å 2 –∏–∑-–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        status = str(row.get("–°—Ç–∞—Ç—É—Å", "")).strip().lower()
        notified = str(row.get("–£–≤–µ–¥–æ–º–ª–µ–Ω–æ", "")).strip()

        if status in ["–≥–æ—Ç–æ–≤–æ", "–Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"] and notified == "":
            result.append({
                "row_index": idx,
                "user_id": row.get("Telegram ID"),
                "username": row.get("–ù–∏–∫"),
                "scooter_number": row.get("–ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞"),
                "status": status
            })

            worksheet.update_cell(idx, 7, "‚úÖ")  # –æ—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω

    return result

def get_todays_entries():
    today = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%d.%m.%Y')
    entries = []
    for row in worksheet.get_all_records():
        if row['–î–∞—Ç–∞'].startswith(today):
            entries.append({
                "number": row["–ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞"],
                "sides": row["–°—Ç–æ—Ä–æ–Ω—ã"],
                "status": row.get("–°—Ç–∞—Ç—É—Å", "")
            })
    return entries

def highlight_next_empty_row():
    worksheet = sh.worksheet(SHEET_NAME)
    values = worksheet.col_values(1)
    next_row = len(values) + 1

    # –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        worksheet.insert_row([''] * 11, index=next_row)
    except gspread.exceptions.APIError as e:
        print(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å: {e}")

    # –ó–∞—Ç–µ–º –æ–∫—Ä–∞—à–∏–≤–∞–µ–º
    yellow_fill = CellFormat(backgroundColor=Color(1, 1, 0))  # –∂—ë–ª—Ç—ã–π
    cell_range = f"A{next_row}:K{next_row}"
    format_cell_range(worksheet, cell_range, yellow_fill)

if __name__ == "__main__":
    try:
        highlight_next_empty_row()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∑–∞–ª–∏–≤–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")