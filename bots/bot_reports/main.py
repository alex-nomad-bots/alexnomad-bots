# main.py
import asyncio
import logging
import gspread
from datetime import datetime
import traceback
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN, GOOGLE_SHEET_URL, GOOGLE_CREDS_PATH

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery


logging.basicConfig(level=logging.INFO)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# --- Google Sheets ---
try:
    gc = gspread.service_account(filename=GOOGLE_CREDS_PATH)
    sh = gc.open_by_url(GOOGLE_SHEET_URL)
    worksheet = sh.sheet1
    GS_READY = True
    logging.info("Google Sheets connected successfully")
except Exception as e:
    logging.exception("Google Sheets init error")
    worksheet = None
    GS_READY = False

def append_to_sheet(row: list):
    if not GS_READY or worksheet is None:
        raise RuntimeError("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDS_PATH –∏ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ (–ø—Ä–∞–≤–∞ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å').")
    worksheet.append_row(row)

def get_questions():
    headers = worksheet.row_values(1)
    return headers[3:]

QUESTIONS = get_questions()

class WorkForm(StatesGroup):
    fullname = State()
    current_question = State()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=get_start_keyboard())

def get_start_keyboard():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_work")]
        ]
    )
    return kb


# Diagnostics command to test Google Sheets connectivity
@dp.message(Command("testgs"))
async def test_gs(message: Message):
    try:
        append_to_sheet([
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            message.from_user.username or "",
            f"{message.from_user.full_name} (test)",
            "0", "0", "0"
        ])
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e.__class__.__name__}: {e}")

@dp.callback_query(lambda c: c.data == "start_work")
async def process_start_work(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(WorkForm.fullname)
    await callback.answer()

@dp.message(WorkForm.fullname)
async def enter_fullname(message: Message, state: FSMContext):
    await state.update_data(fullname=message.text.strip(), answers={}, current_index=0)
    await message.answer(f"{QUESTIONS[0]}:")
    await state.set_state(WorkForm.current_question)

@dp.message(WorkForm.current_question)
async def process_question(message: Message, state: FSMContext):
    data = await state.get_data()
    idx = data["current_index"]
    answers = data["answers"]

    current_question = QUESTIONS[idx]

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å "–ü—Ä–æ—á–∏–µ —Ä–∞–±–æ—Ç—ã" ‚Üí —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ–∫—Å—Ç
    if "–ø—Ä–æ—á–∏–µ —Ä–∞–±–æ—Ç—ã" in current_question.lower():
        answers[current_question] = message.text
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∂–¥—ë–º —á–∏—Å–ª–æ
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
        answers[current_question] = int(message.text)

    idx += 1

    if idx < len(QUESTIONS):
        await state.update_data(current_index=idx, answers=answers)
        await message.answer(f"{QUESTIONS[idx]}:")
    else:
        row = [
            datetime.now().strftime("%d.%m.%Y"),
            message.from_user.username or "",
            data["fullname"]
        ]
        for q in QUESTIONS:
            val = answers.get(q, "")
            if "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" in q.lower() or "–ø—Ä–æ—á–∏–µ —Ä–∞–±–æ—Ç—ã" in q.lower():
                row.append(val if isinstance(val, str) else "")
            else:
                try:
                    row.append(int(val))
                except (ValueError, TypeError):
                    row.append(0)

        try:
            append_to_sheet(row)
            await message.answer("‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ!")
            await message.answer("–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=get_start_keyboard())
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets.\n–û—à–∏–±–∫–∞: {e.__class__.__name__}: {e}")
        finally:
            await state.clear()

async def main():
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ polling ‚Äî –æ–∫. –ü–æ–∑–∂–µ —Å–¥–µ–ª–∞–µ–º systemd/Docker –ø–æ –∂–µ–ª–∞–Ω–∏—é.
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())